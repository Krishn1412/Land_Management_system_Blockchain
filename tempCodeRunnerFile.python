from hashlib import sha256
import collections
import time
from wsgiref import validate

def validate_chain(chain_array):
        _prevBlock = "-1"
        for block in chain_array:
            if block.prev_hash==_prevBlock:
                _prevBlock = block.hash
            else:
                return False
            return True  
class Block:
    def __init__ (self,prev_hash,merkleRootHash,timestamp,hash):
        self.prev_hash=prev_hash
        self.merkleRootHash=merkleRootHash
        self.timestamp=timestamp
        self.hash=hash
        
    def computeHash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return sha256(block_string.encode()).hexdigest()
    
class Blockchain:    
    def __init__(self):
        self.chain_array=[]
    def create_genesis(self):
        to_hash1=str("0")+str("-1")+str(time.time())
        hashblock= sha256(to_hash1.encode()).hexdigest()
        genesis_block=Block("-1","0",time.time(),hashblock)
        genesis_block.hash=Block.computeHash(genesis_block)
        self.chain_array.append(genesis_block)   
    def last_block(self):
        return self.chain_array[-1]
    def add_block(self,Block):
        self.chain_array.append(Block)
        return True  
    
def main():
    BC=Blockchain()
    BC.create_genesis()
    file_hashes=[]
    for i in range(0,5):
        file_hashes.append(str(uuid.uuid4().hex))
        
    last_blc1=BC.last_block()
    block1=Block(last_blc1.hash,file_hashes[1],time.time(),file_hashes[2])
    BC.chain_array.append(block1)
    last_blc2=BC.last_block()
    block2=Block(last_blc2.hash,file_hashes[4],time.time(),file_hashes[5])
    last_blc3=BC.last_block()
    BC.chain_array.append(block2)
    block3=Block(last_blc3.hash,file_hashes[7],time.time(),file_hashes[8])
    BC.chain_array.append(block3)
    
    print(validate_chain(BC.chain_array))
if __name__=="__main__":
    main()